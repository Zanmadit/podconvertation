 Do you have advice for a programming beginner on how to learn Python the right way?  Find something you actually want to do with it.  If you say, I want to learn skill X, that's not enough motivation.  You need to pick something and it can be a crazy problem you want to solve.  It can be completely unrealistic.  But something that challenges you into actually learning coding in some language.  And there's so many projects out there you can look for like that.  That does not have to be some big ambitious thing.  It could be writing a small bot.  If you're into social media, you can write a Reddit bot or a Twitter bot or some aspect  of automating something that you do every single day, processing files, all that kind  of stuff.  Nowadays, you can take machine learning components and sort of plug those things together.  So cool stuff with them.  So that's actually a really good example.  So if you're interested in machine learning, the state of machine learning is such that  like a tutorial that takes an hour can get you to start using pre-trained models to  do something super cool.  And that's a good way to learn Python because you learn just enough to run this model and  that's like a sneaky way to get in there to figure out how to import stuff, how to write  basic IO, how to run functions.  And I'm not sure if it's the best way to learn the basics in Python, but it could be  nice to just get fall in love first and then figure out the basics, right?  Yeah, you can't expect to learn Python from a one hour video.  I'm blanking out on the name of someone who wrote a very funny blog post where he said,  I see all these ads for things like learn Python in 10 days or so.  And he said, the goal should be learn Python in 10 years.  That's hilarious, but I completely disagree with that.  I think the criticism behind that is that the, the place is just like the blog post  from earlier, the places that tell you learn Python in five minutes or 10 minutes, they're  actually usually really bad tutorials.  So the thing is, I do believe that you can learn a thing in an hour to like get some  interesting quick, like it hooks you, I mean, this, but it just takes a tremendous amount  of skill to be that kind of educator, Richard Feynman was able to condense a lot of ideas  and physics in a very short amount of time, but that takes a deep, deep understanding.  So yes, of course, the actual, I think the 10, the 10 years is about the experience, the  pain along the way.  And there's something from the practice.  You can memorize the syntax, but, well, I couldn't, but maybe, maybe someone else can,  but that doesn't make you a coder.  Yeah.  Actually, coding has changed in fascinating ways because so much of coding is copying  pacing from stack overflow and then adjusting, which is another way of coding.  And I don't want to talk down to that kind of style of coding because it's kind of  nicely efficient, but you know where that is going, a code generation, no, seriously,  get a copilot.  Yeah, copilot.  I use it every day and it really, yeah, it writes a lot of code for me.  And usually it's slightly wrong, but it still saves me typing because all I have to do  is like, change one word in a line of text that otherwise it generated perfectly.  And like, how many times are you looking for like, oh, what was I doing this morning?  I was looking for a begin marker and I was looking for an end marker.  And so begin is blah, blah, blah search for begin.  This is the begin token.  And then the next line I type E and it completes the whole line with end instead of begin.  That's a very simple example.  Sometimes it's sort of, if I name my function right, it writes at five or ten line function.  And you know Python enough to very quickly then detect the issues, it becomes a really  good dance partner then.  It doesn't save me a lot of thinking, but since I'm a poor typist, I'm very much appreciative  of all the typing it does for me.  What's better actually than the previous generation of suggestions that are also still built  in VS code, where when you hit like a dot, it tries to guess what the type is of the variable  to the left of the dot and then it gives you a list, a pop down menu of what the attributes  of that object are, but co-pilot is much, much smoother than that.  What's fascinating here that you use GitHub co-pilot, do you think, do you worry about  the future of that?  Did the automatic code generation, the increasing amount of that kind of capability are programmers,  jobs threatened?  Or is there still a significant role for you?  Are programmers jobs threatened by the existence of Stack Overflow?  I don't think so.  It helps you take care of the boring stuff and you shouldn't try to use it to do something  that you have no way of understanding what you're doing yet.  A tool like that is always best when the question you're asking is, please remind me of how I  do this, which I could look up how to do it, but right now I've forgotten whether the  method is called foo or bar or what the shape of the API is, does it use a builder object  or a constructor or a factory or something else and what are the parameters?  It serves that role, it's like a great assistant, but the creative work of deciding what you  want to go to do is totally yours.